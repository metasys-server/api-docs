FORMAT: 1A

HOST: https://localhost/api/

Metasys API
===========

The Metasys API is the exposed interface for accessing system data. This document defines the contracts included in that interface.

<!--
**See HLD for more detailed information about the API**
-->

## API Version

```
Version: 1
Prefix: /api/v1
```

This documentation was last updated on {{revision}}.

### API Version Notes

<!--
This document describes version 1 of the API (not to be confused with document version in [Document Information](#document-information) section above). -->

To indicate, which version of the API you want to use, choose one of the following options:
* Modify the version portion of the URL.
* Modify the version portion of the `Accept` header.

Table 1: Modify the version portion of the URL
|Example   | URL |
|----------|-----|
|Format    | http://localhost/api/v<>/spaces |
|Version 1 | http://localhost/api/v1/spaces |
|Version 2 | http://localhost/api/v2/spaces |

Table 2: Modify the version portion of the `Accept` header
|Example   | Accept header |
|----------|----------------------------------------------|
|Format    | Accept: application/vnd.metasysapi.v<>+json  |
|Version 1 | Accept: application/vnd.metasysapi.v1+json   |
|Version 2 | Accept: application/vnd.metasysapi.v2+json   |

#### Version Specification Rules

Because version specification is optional and the user has a choice of options, note the following system rules:
* If the consumer does not specify a version, the lowest supported version opens.
* If the consumer specifies a version in the URL and the `Accept` header, the system uses the version specified in the URL. The system ignores the version specified in the header.
* If the consumer specifies an invalid version, a 404 (not found) error status appears.

#### Version Response Behavior

To enable the consumer to identify, which version of the API is active, the `Content-Type` header of the response always contains in part, the version of the API that you used to server the request.

See the following example for version 2, `Content-Type: application/vnd.metasysapi.v2+json` for version.

## Pagination

On endpoints that use `page` and `pageSize`, the default `page` number is 1, and is 1-based for all endpoints. The default `pageSize` varies between endpoints.  The `page` parameter indicates the `page` number of items to return from the endpoint.  The `pageSize` parameter indicates the maximum number of items in the response from the endpoint.

Payloads returned by pagination-enabled endpoints have a similar structure. A `total` property indicates the total number of items included in all pages. A `next` and `previous` property supplies a link to the next and previous page of data, respectively. If irrelevant leave these properties empty, for example, it is the first or last page, or there is only one page of data. The `items` property contains the data included in the page.

## Sorting Rules

On endpoints that allow a ‘sort’ query, use a single attribute name format for the supplied value. For descending order, use the prefix ‘-‘. A prefix is not required for ascending order. 

## Relationship Links

Payloads may contain links to related data, with each payload represented as a property sharing the name of the respective relationship. The links point to either single or multiple related entities. A link to a single entity points to the canonical endpoint for that entity. A link to multiple entities points to an endpoint dedicated to representing that particular relationship.

For example, if object `/objects/a` has children `/objects/b` and `/objects/c`, `/objects/a` returns a payload with the property `objects` and a value of `/objects/a/objects`, because you can return multiple children. However, the payload `/objects/b/` returns contains a property 'parent' with a value of `/objects/a` (not `/objects/b/parent`), because the relationship represents a single entity.

Additionally, each payload contains a `self` property, which contains a link representing what endpoint you use to obtain the data the current payload contains.

## DateTimes

Unless otherwise specified, all date times in the document use ISO-8601 encoding.

## Validation

There are some general rules that apply across all endpoints. If you provide invalid inputs or do not meet certain preconditions, the API responds with an appropriate error to indicate what went wrong.

|Condition                      |Error                       |Details                                                                                                    |
|-------------------------------|----------------------------|-----------------------------------------------------------------------------------------------------------|
|Missing required parameter     |400 (Bad Request)           |The request does not include a parameter marked required.                                                   |
|Parameter incorrect type       |400 (Bad Request)           |The parameter value type is incorrect. For example, use a number instead of a string.                       |
|Parameter out of range         |400 (Bad Request)           |The value of the numeric parameter is outside the allowed range.                                            |
|Parameter not in set           |400 (Bad Request)           |The string parameter does not match the set of predefined values.                                           |
|Parameter not in correct format|400 (Bad Request)           |The string parameter format is incorrect.                                                                   |
|User not authenticated         |401 (Unauthorized)          |The authentication token supplied by the request is missing, invalid, or expired.                                        |
|Record not authorized          |403 (Forbidden)             |You are not authorized to view data matching the provided identifier.                                       |
|Identifier not found           |404 (Not Found)             |The identifier you provided does not match any known data.                                                  |
|The Resource already exists    |409 (Conflict)              |The resource already exists.                                                                                |
|Internal Server Error          |500 (Internal Server Error) |An unexpected error occured.                                                                                 |
|The device is not supported    |501 (Not Implemented)       |The server does not support the functionality it requires to fulfill the request.                           |
|The device is offline          |503 (Service Unavailable)   |The device is currently offline and unable to serve the request.                                            |

